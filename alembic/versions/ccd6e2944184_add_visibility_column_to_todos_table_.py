"""Add visibility column to todos table and remove is_private

Revision ID: ccd6e2944184
Revises: 0e52c63a3730
Create Date: 2025-07-03 18:18:30.525421

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ccd6e2944184'
down_revision: Union[str, Sequence[str], None] = '0e52c63a3730'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq_session_user'), 'session_members', type_='unique')

    # Add the new 'visibility' column with a temporary nullable=True
    op.add_column('todos', sa.Column('visibility', sa.String(), nullable=True))

    # Update the 'visibility' column based on the old 'is_private' column
    # Set 'private' for todos that were previously private
    op.execute("UPDATE todos SET visibility = 'private' WHERE is_private = TRUE")
    # Set 'team_session' for todos that were previously public (is_private = FALSE) AND had a session_id
    op.execute("UPDATE todos SET visibility = 'team_session' WHERE is_private = FALSE AND session_id IS NOT NULL")
    # For any remaining todos where is_private is FALSE but session_id is NULL, which implies an inconsistency,
    # we will default them to 'private' (or could decide to delete them based on business logic).
    # Given the previous logic, a public todo *must* have a session_id. So if is_private is FALSE and session_id is NULL,
    # it's an error state. We'll default to private for safety.
    op.execute("UPDATE todos SET visibility = 'private' WHERE is_private = FALSE AND session_id IS NULL")

    # Alter the 'visibility' column to be non-nullable with a default value
    op.alter_column('todos', 'visibility', nullable=False, server_default='private')

    # Drop the old 'is_private' column
    op.drop_column('todos', 'is_private')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('uq_session_user'), 'session_members', ['session_id', 'user_id'], postgresql_nulls_not_distinct=False)

    # Add back the 'is_private' column with nullable=True
    op.add_column('todos', sa.Column('is_private', sa.Boolean(), nullable=True))

    # Populate 'is_private' based on the 'visibility' column
    op.execute("UPDATE todos SET is_private = TRUE WHERE visibility = 'private'")
    op.execute("UPDATE todos SET is_private = FALSE WHERE visibility = 'team_session' OR visibility = 'global_public'")

    # Alter 'is_private' to be non-nullable with its default
    op.alter_column('todos', 'is_private', nullable=False, server_default='TRUE')

    # Drop the new 'visibility' column
    op.drop_column('todos', 'visibility')
    # ### end Alembic commands ###
